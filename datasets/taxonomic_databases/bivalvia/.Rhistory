save(taxdbnona,env,non_log_env,qsqs,file = "savevar.RData")
setwd(dir = dirname(getSourceEditorContext()$path)) #set path
qsqs <- 0.7 #set quorum value for sqs subsampling
#divdyn dataframes
data(stages)
data(stratkeys)
data(keys)
data(tens)
#taxonomic database
taxdb <- read.delim("vrineau_2020-07-30_08-37-13 - foraminifera",
stringsAsFactors = FALSE)
gstages_path <- paste(substr(getSourceEditorContext()$path,1,40),
"datasets/environmental_databases/", sep="")
gstages <- read.csv(paste(gstages_path,"gstages.micro.csv", sep=""),
sep = ",", na.strings = "", stringsAsFactors = FALSE) #taxonomic database
names(taxdb)[2] <- "genus"
names(taxdb)[19] <- "age"
#taxonomic database
taxdb <- read.delim("vrineau_2020-07-30_08-37-13 - foraminifera.csv",
stringsAsFactors = FALSE)
getwd()
setwd(dir = dirname(getSourceEditorContext()$path)) #set path
qsqs <- 0.9 #set quorum value for sqs subsampling
#divdyn dataframes
data(stages)
data(stratkeys)
data(keys)
data(tens)
#taxonomic database
taxdb <- read.delim("vrineau_2020-07-30_08-37-13 - foraminifera.csv",
stringsAsFactors = FALSE)
gstages_path <- paste(substr(getSourceEditorContext()$path,1,40),
"datasets/environmental_databases/", sep="")
gstages <- read.csv(paste(gstages_path,"gstages.micro.csv", sep=""),
sep = ",", na.strings = "", stringsAsFactors = FALSE) #taxonomic database
names(taxdb)[2] <- "genus"
names(taxdb)[19] <- "age"
taxdb$Taxon.Abundance <- as.integer(taxdb$Taxon.Abundance)
taxdb <- taxdb[!is.na(taxdb$age),]
#database datation
taxdb$stg <- rep(NA, nrow(taxdb))
#datation par stg bin
for (i in 1:nrow(taxdb)) {
for (j in 1:nrow(gstages)) {
if (taxdb$age[i] < gstages$bottom[j] & taxdb$age[i] > gstages$top[j]) {
taxdb$stg[i] <- gstages$stg[j]
break
}
}
}
taxdb$stg[taxdb$age == 0] <- gstages$stg[length(gstages$stg)]
#diversity sqs subsampling and rates calculation
samptax <-binstat(taxdb, tax="genus", bin="stg",coll="Site", ref="Source",
duplicates=TRUE,indices=TRUE, noNAStart=TRUE)
dd <-divDyn(taxdb, bin="stg", tax="genus", noNAStart=TRUE)
sqsquorum <-subsample(taxdb, iter=500, q=qsqs, tax="genus", bin="stg",
type="sqs", noNAStart=TRUE)
sqsquorum.r <- cbind(sqsquorum, divers = sqsquorum$ori2f3 - sqsquorum$ext2f3)
colnames(sqsquorum.r)[1] <- "stg"
#environmental datasets
env_path <- paste(substr(getSourceEditorContext()$path,1,40), "datasets/environmental_databases/", sep="")
T.scotese.dataset1    <- read.csv(paste(env_path,"T.scotese.dataset.micro.csv", sep=""),sep = ",", na.strings = "", stringsAsFactors = FALSE)
C.ogg.dataset1        <- read.csv(paste(env_path,"C.ogg.dataset.micro.csv", sep=""), sep = ",", na.strings = "", stringsAsFactors = FALSE)
S.macarthur.dataset1  <- read.csv(paste(env_path,"S.macarthur.dataset.micro.csv", sep=""), sep = ",", na.strings = "", stringsAsFactors = FALSE)
Sf.paytan.dataset1    <- read.csv(paste(env_path,"Sf.paytan.dataset.micro.csv", sep=""), sep = ",", na.strings = "", stringsAsFactors = FALSE)
colnames(C.ogg.dataset1)[2] <- "C.veizer"
colnames(T.scotese.dataset1)[2] <- "T.scotese"
colnames(S.macarthur.dataset1)[2] <- "S.macarthur"
colnames(Sf.paytan.dataset1)[2] <- "Sf.paytan"
#merging
non_log_env <- Reduce(function(x,y) merge(x,y,by = "stg", all.x = TRUE, all.y = FALSE), #Il faut choisir LOESS ou non ici (5 ou 6)
list(sqsquorum.r[,c(1,13,28,29,32)],
T.scotese.dataset1,
C.ogg.dataset1,
S.macarthur.dataset1,
Sf.paytan.dataset1
))
#NA deletion
widestts <- c()
for (i in 1:nrow(non_log_env)) {
tryts <- c()
for (j in i:nrow(non_log_env)) {
if (!is.na(non_log_env$divCSIB[j])) {
tryts <- c(tryts,j)
} else {
break}
}
if (length(tryts) > length(widestts)) {widestts <- tryts}
}
non_log_env <- non_log_env[widestts,]
#log
env_detrend <- non_log_env
env_detrend$divCSIB <- log(non_log_env$divCSIB)
env <- env_detrend
#remove trend
env$T.scotese    <- c(NA,NA,diff(env_detrend$T.scotese, differences = 2))
env$S.macarthur <- c(NA,NA,diff(env_detrend$S.macarthur, differences = 2))
env$Sf.paytan   <- c(NA,NA,diff(env_detrend$Sf.paytan, differences = 2))
env$C.veizer    <- c(NA,diff(env_detrend$C.veizer, differences = 1))
env$divCSIB    <- c(NA,diff(env_detrend$divCSIB, differences = 1))
#outlier deletion
env$S.macarthur[1:2] <- NA #outlier deletion
env$Sf.paytan[1] <- NA #outlier deletion
env$C.veizer[1] <- NA #outlier deletion
#ordernorm transformation and scaling
for (j in 2:ncol(env)) {
orderNorm_obj <- orderNorm(env[,j])
env[,j] <- scale(predict(orderNorm_obj))
}
#save
write.csv(env,"env_dataframe.csv", row.names = FALSE)
taxdbnona <- taxdb
save(taxdbnona,env,non_log_env,qsqs,file = "savevar.RData")
library(divDyn)
library(rstudioapi)
library(bestNormalize)
setwd(dir = dirname(getSourceEditorContext()$path)) #set path
qsqs <- 0.9 #set quorum value for sqs subsampling
#divdyn dataframes
data(stages)
data(stratkeys)
data(keys)
data(tens)
#taxonomic database
taxdb <- read.delim("vrineau_2020-07-30_08-42-55 - diatoms.csv",
stringsAsFactors = FALSE)
gstages_path <- paste(substr(getSourceEditorContext()$path,1,40),
"datasets/environmental_databases/", sep="")
gstages <- read.csv(paste(gstages_path,"gstages.micro.csv", sep=""),
sep = ",", na.strings = "", stringsAsFactors = FALSE) #taxonomic database
names(taxdb)[2] <- "genus"
names(taxdb)[19] <- "age"
taxdb <- taxdb[!is.na(taxdb$age),]
#database datation
taxdb$stg <- rep(NA, nrow(taxdb))
#datation par stg bin
for (i in 1:nrow(taxdb)) {
for (j in 1:nrow(gstages)) {
if (taxdb$age[i] < gstages$bottom[j] & taxdb$age[i] > gstages$top[j]) {
taxdb$stg[i] <- gstages$stg[j]
break
}
}
}
taxdb$stg[taxdb$age == 0] <- gstages$stg[length(gstages$stg)]
#diversity sqs subsampling and rates calculation
samptax <-binstat(taxdb, tax="genus", bin="stg",coll="Site", ref="Source",
duplicates=TRUE,indices=TRUE, noNAStart=TRUE)
dd <-divDyn(taxdb, bin="stg", tax="genus", noNAStart=TRUE)
sqsquorum <-subsample(taxdb, iter=500, q=qsqs, tax="genus", bin="stg",
type="sqs", noNAStart=TRUE)
sqsquorum.r <- cbind(sqsquorum, divers = sqsquorum$ori2f3 - sqsquorum$ext2f3)
colnames(sqsquorum.r)[1] <- "stg"
#environmental datasets
env_path <- paste(substr(getSourceEditorContext()$path,1,40), "datasets/environmental_databases/", sep="")
T.scotese.dataset1    <- read.csv(paste(env_path,"T.scotese.dataset.micro.csv", sep=""),sep = ",", na.strings = "", stringsAsFactors = FALSE)
C.ogg.dataset1        <- read.csv(paste(env_path,"C.ogg.dataset.micro.csv", sep=""), sep = ",", na.strings = "", stringsAsFactors = FALSE)
S.macarthur.dataset1  <- read.csv(paste(env_path,"S.macarthur.dataset.micro.csv", sep=""), sep = ",", na.strings = "", stringsAsFactors = FALSE)
Sf.paytan.dataset1    <- read.csv(paste(env_path,"Sf.paytan.dataset.micro.csv", sep=""), sep = ",", na.strings = "", stringsAsFactors = FALSE)
colnames(C.ogg.dataset1)[2] <- "C.veizer"
colnames(T.scotese.dataset1)[2] <- "T.scotese"
colnames(S.macarthur.dataset1)[2] <- "S.macarthur"
colnames(Sf.paytan.dataset1)[2] <- "Sf.paytan"
#merging
non_log_env <- Reduce(function(x,y) merge(x,y,by = "stg", all.x = TRUE, all.y = FALSE), #Il faut choisir LOESS ou non ici (5 ou 6)
list(sqsquorum.r[,c(1,13,28,29,32)],
T.scotese.dataset1,
C.ogg.dataset1,
S.macarthur.dataset1,
Sf.paytan.dataset1
))
#NA deletion
widestts <- c()
for (i in 1:nrow(non_log_env)) {
tryts <- c()
for (j in i:nrow(non_log_env)) {
if (!is.na(non_log_env$divCSIB[j])) {
tryts <- c(tryts,j)
} else {
break}
}
if (length(tryts) > length(widestts)) {widestts <- tryts}
}
non_log_env <- non_log_env[widestts,]
#log
env_detrend <- non_log_env
env_detrend$divCSIB <- log(non_log_env$divCSIB)
env <- env_detrend
#remove trend
env$T.scotese    <- c(NA,NA,diff(env_detrend$T.scotese, differences = 2))
env$S.macarthur <- c(NA,NA,diff(env_detrend$S.macarthur, differences = 2))
env$C.veizer    <- c(NA,diff(env_detrend$C.veizer, differences = 1))
env$Sf.paytan   <- c(NA,NA,diff(env_detrend$Sf.paytan, differences = 2))
#outlier deletion
env$divCSIB[1] <- NA
#ordernorm transformation and scaling
for (j in 2:ncol(env)) {
orderNorm_obj <- orderNorm(env[,j])
env[,j] <- scale(predict(orderNorm_obj))
}
#save
write.csv(env,"env_dataframe.csv", row.names = FALSE)
taxdbnona <- taxdb
save(taxdbnona,env,non_log_env,qsqs,file = "savevar.RData")
getSourceEditorContext()$path)
getSourceEditorContext()$path
gstages_path <- paste(substr(getSourceEditorContext()$path,1,40),
"datasets/taxonomic_databases/", sep="")
gstages_path
setwd(dir = dirname(taxdb_path)) #set path
taxdb_path <- paste(substr(getSourceEditorContext()$path,1,40),
"datasets/taxonomic_databases/", sep="")
setwd(dir = dirname(taxdb_path)) #set path
library(rstudioapi)
scriptlist <- c("bivalvia/env.R",
"brachipoda/env.R",
"scleractinia/env.R",
"gasteropoda/env.R",
"metazoa.stg/env.R",
"prymnesiophycae/env.micro.R",
"foraminifera/env.micro.R",
"radiolaria.neptune/env.micro.R",
"coccolithophoridae/env.micro.R")
for (scr in scriptlist) {
taxdb_path <- paste(substr(getSourceEditorContext()$path,1,40),
"datasets/taxonomic_databases/",scr, sep="")
setwd(dir = dirname(taxdb_path)) #set path
ll <- parse(file = scr)
#lancement du script avec capture des erreurs
for (i in seq_along(ll)) {
tryCatch(eval(ll[[i]]),
error = function(e) message("catched error", as.character(e)))
}
#nettoyer l'environnement
rm(list= ls()[!(ls() %in% c("scriptlist","scr"))])
}
taxdb_path
ll
ll <- parse(file = scr)
taxdb_path = "C:/Users/valen/Desktop/ETBD_all_results/datasets/taxonomic_databases/bivalvia/"
setwd(dir = dirname(taxdb_path)) #set path
ll <- parse(file = scr)
ll
scriptlist <- c("bivalvia/env.R",
"brachipoda/env.R",
"scleractinia/env.R",
"gasteropoda/env.R",
"metazoa.stg/env.R",
"prymnesiophycae/env.R",
"foraminifera/env.R",
"radiolaria.neptune/env.R",
"coccolithophoridae/env.R")
for (scr in scriptlist) {
taxdb_path <- paste(substr(getSourceEditorContext()$path,1,40),
"datasets/taxonomic_databases/",scr, sep="")
setwd(dir = dirname(taxdb_path)) #set path
ll <- parse(file = scr)
#lancement du script avec capture des erreurs
for (i in seq_along(ll)) {
tryCatch(eval(ll[[i]]),
error = function(e) message("catched error", as.character(e)))
}
#nettoyer l'environnement
rm(list= ls()[!(ls() %in% c("scriptlist","scr"))])
}
taxdb_path
ll <- parse(file = scr)
ll
ll <- parse(file = scr)
scriptlist <- c("bivalvia",
"brachipoda",
"scleractinia",
"gasteropoda",
"metazoa.stg",
"prymnesiophycae",
"foraminifera",
"radiolaria.neptune",
"coccolithophoridae")
for (scr in scriptlist) {
scr
]}
for (scr in scriptlist) {
taxdb_path <- paste(substr(getSourceEditorContext()$path,1,40),
"datasets/taxonomic_databases/",scr, sep="")
setwd(dir = dirname(taxdb_path)) #set path
ll <- parse(file = paste(scr,"/env.R", sep = ""))
#R script loading
for (i in seq_along(ll)) {
tryCatch(eval(ll[[i]]),
error = function(e) message("catched error", as.character(e)))
}
#cleaning
rm(list= ls()[!(ls() %in% c("scriptlist","scr"))])
}
taxdb_path
getwd()
taxdb_path <- paste(substr(getSourceEditorContext()$path,1,40),
"datasets/taxonomic_databases/",scr, sep="")
setwd(dir = dirname(taxdb_path)) #set path
getwd()
taxdb_path = "C:/Users/valen/Desktop/ETBD_all_results/datasets/taxonomic_databases/scleractinia/"
setwd(dir = dirname(taxdb_path)) #set path
getwd()
taxdb_path
setwd(dir = dirname(taxdb_path)) #set path
scr
ll <- parse(file = paste(scr,"/env.R", sep = ""))
library(rstudioapi)
scriptlist <- c("bivalvia",
"brachipoda",
"scleractinia",
"gasteropoda",
"metazoa.stg",
"prymnesiophycae",
"foraminifera",
"radiolaria.neptune",
"coccolithophoridae")
for (scr in scriptlist) {
taxdb_path <- paste(substr(getSourceEditorContext()$path,1,40),
"datasets/taxonomic_databases/",scr, sep="")
setwd(dir = dirname(taxdb_path)) #set path
ll <- parse(file = paste(scr,"/env.R", sep = ""))
#R script loading
for (i in seq_along(ll)) {
tryCatch(eval(ll[[i]]),
error = function(e) message("catched error", as.character(e)))
}
#cleaning
rm(list= ls()[!(ls() %in% c("scriptlist","scr"))])
}
scr
library(rstudioapi)
scriptlist <- c("bivalvia",
"brachipoda",
"scleractinia",
"gasteropoda",
"metazoa",
"prymnesiophycae",
"foraminifera",
"radiolaria",
"coccolithophoridae")
for (scr in scriptlist) {
taxdb_path <- paste(substr(getSourceEditorContext()$path,1,40),
"datasets/taxonomic_databases/",scr, sep="")
setwd(dir = dirname(taxdb_path)) #set path
ll <- parse(file = paste(scr,"/env.R", sep = ""))
#R script loading
for (i in seq_along(ll)) {
tryCatch(eval(ll[[i]]),
error = function(e) message("catched error", as.character(e)))
}
#cleaning
rm(list= ls()[!(ls() %in% c("scriptlist","scr"))])
}
taxdb_path <- paste(substr(getSourceEditorContext()$path,1,40),
"datasets/taxonomic_databases/",scr, sep="")
setwd(dir = dirname(taxdb_path)) #set path
ll <- parse(file = paste(scr,"/env.R", sep = ""))
ll
#R script loading
for (i in seq_along(ll)) {
tryCatch(eval(ll[[i]]),
error = function(e) message("catched error", as.character(e)))
}
#cleaning
rm(list= ls()[!(ls() %in% c("scriptlist","scr"))])
taxdb_path <- paste(substr(getSourceEditorContext()$path,1,40),
"datasets/taxonomic_databases/",scr, sep="")
setwd(dir = dirname(taxdb_path)) #set path
ll <- parse(file = paste(scr,"/env.R", sep = ""))
#R script loading
for (i in seq_along(ll)) {
tryCatch(eval(ll[[i]]),
error = function(e) message("catched error", as.character(e)))
}
dirname(getSourceEditorContext()$path)
#taxonomic database
taxdb <- read.delim("vrineau_2020-07-30_07-41-03 calcareous nanofossils all.csv",
stringsAsFactors = FALSE)
setwd(dir = dirname(getSourceEditorContext()$path)) #set path
qsqs <- 0.7 #set quorum value for sqs subsampling
#divdyn dataframes
data(stages)
data(stratkeys)
data(keys)
data(tens)
#taxonomic database
taxdb <- read.delim("vrineau_2020-07-30_07-41-03 calcareous nanofossils all.csv",
stringsAsFactors = FALSE)
#cleaning
rm(list= ls()[!(ls() %in% c("scriptlist","scr"))])
taxdb_path <- paste(substr(getSourceEditorContext()$path,1,40),
"datasets/taxonomic_databases/",scr, sep="")
setwd(dir = dirname(taxdb_path)) #set path
ll <- parse(file = paste(scr,"/env.R", sep = ""))
#R script loading
for (i in seq_along(ll)) {
tryCatch(eval(ll[[i]]),
error = function(e) message("catched error", as.character(e)))
}
file.path(substr(getSourceEditorContext()$path,1,40),"datasets","taxonomic_database",scr)
#cleaning
rm(list= ls()[!(ls() %in% c("scriptlist","scr"))])
taxdb_path <- paste(substr(getSourceEditorContext()$path,1,40),
"datasets/taxonomic_databases/",scr,"/", sep="")
setwd(dir = dirname(taxdb_path)) #set path
ll <- parse(file = paste(scr,"/env.R", sep = ""))
#R script loading
for (i in seq_along(ll)) {
tryCatch(eval(ll[[i]]),
error = function(e) message("catched error", as.character(e)))
}
taxdb_path
#cleaning
rm(list= ls()[!(ls() %in% c("scriptlist","scr"))])
taxdb_path <- paste(substr(getSourceEditorContext()$path,1,40),
"datasets/taxonomic_databases/",scr,"/", sep="")
setwd(dir = taxdb_path) #set path
ll <- parse(file = paste(scr,"env.R", sep = ""))
ll <- parse(file = paste(scr,"/env.R", sep = ""))
ll <- parse(file = "/env.R")
ll <- parse(file = "env.R")
#R script loading
for (i in seq_along(ll)) {
tryCatch(eval(ll[[i]]),
error = function(e) message("catched error", as.character(e)))
}
library(rstudioapi)
scriptlist <- c("bivalvia",
"brachipoda",
"scleractinia",
"gasteropoda",
"metazoa",
"prymnesiophycae",
"foraminifera",
"radiolaria",
"coccolithophoridae")
for (scr in scriptlist) {
taxdb_path <- paste(substr(getSourceEditorContext()$path,1,40),
"datasets/taxonomic_databases/",scr,"/", sep="")
setwd(dir = taxdb_path) #set path
ll <- parse(file = "env.R")
#R script loading
for (i in seq_along(ll)) {
tryCatch(eval(ll[[i]]),
error = function(e) message("catched error", as.character(e)))
}
#cleaning
rm(list= ls()[!(ls() %in% c("scriptlist","scr"))])
}
#cleaning
rm(list= ls()[!(ls() %in% c("scriptlist","scr"))])
library(rstudioapi)
scriptlist <- c("bivalvia",
"brachipoda",
"scleractinia",
"gasteropoda",
"metazoa",
"prymnesiophycae",
"foraminifera",
"radiolaria",
"coccolithophoridae")
for (scr in scriptlist) {
taxdb_path <- paste(substr(getSourceEditorContext()$path,1,40),
"datasets/taxonomic_databases/",scr,"/", sep="")
setwd(dir = taxdb_path) #set path
ll <- parse(file = "env.R")
#R script loading
for (i in seq_along(ll)) {
tryCatch(eval(ll[[i]]),
error = function(e) message("catched error", as.character(e)))
}
#cleaning
rm(list= ls()[!(ls() %in% c("scriptlist","scr"))])
}
setwd(dir = taxdb_path) #set path
ll <- parse(file = "env.R")
#R script loading
for (i in seq_along(ll)) {
tryCatch(eval(ll[[i]]),
error = function(e) message("catched error", as.character(e)))
}
scr = "bivalvia"
taxdb_path <- paste(substr(getSourceEditorContext()$path,1,40),
"datasets/taxonomic_databases/",scr,"/", sep="")
#cleaning
rm(list= ls()[!(ls() %in% c("scriptlist","scr"))])
taxdb_path <- paste(substr(getSourceEditorContext()$path,1,40),
"datasets/taxonomic_databases/",scr,"/", sep="")
setwd(dir = taxdb_path) #set path
ll <- parse(file = "env.R")
#R script loading
for (i in seq_along(ll)) {
tryCatch(eval(ll[[i]]),
error = function(e) message("catched error", as.character(e)))
}
#R script loading
for (i in seq_along(ll)) {
tryCatch(eval(ll[[i]]),
error = function(e) message("catched error", as.character(e)))
}
#cleaning
rm(list= ls()[!(ls() %in% c("scriptlist","scr"))])
taxdb_path <- paste(substr(getSourceEditorContext()$path,1,40),
"datasets/taxonomic_databases/",scr,"/", sep="")
setwd(dir = taxdb_path) #set path
ll <- parse(file = "env.R")
#R script loading
for (i in seq_along(ll)) {
tryCatch(eval(ll[[i]]),
error = function(e) message("catched error", as.character(e)))
}
